{"version":3,"sources":["serviceWorker.js","login/login.js","signup/signup.js","dashboard/dashboard.js","index.js"],"names":["Boolean","window","location","hostname","match","LoginComponent","React","Component","firebase","require","SignUpComponent","state","email","password","confirm_password","signUpError","this","formValid","userTyping","type","e","setState","target","value","submitSignUp","preventDefault","auth","createUserWithEmailAndPassword","then","authRes","userObj","user","title","notes","firestore","collection","doc","set","props","history","push","dbError","authError","className","onSubmit","id","onChange","placeholder","to","style","textDecoration","color","fontSize","DashboardComponent","Routing","path","component","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de3d5551.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nclass LoginComponent extends React.Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <div>\r\n                Hello World from Login\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default LoginComponent","import React from 'react'\r\nimport './signup.css'\r\nimport { Link } from 'react-router-dom'\r\nconst firebase = require('firebase')\r\nclass SignUpComponent extends React.Component\r\n{\r\n    constructor()\r\n        {\r\n            super()\r\n            this.state = {\r\n                email:null,\r\n                password:null,\r\n                confirm_password:null,\r\n                signUpError:''\r\n            }\r\n        }\r\n    \r\n    render()\r\n    \r\n    {\r\n        this.formValid = () => this.state.password === this.state.confirm_password\r\n        \r\n\r\n\r\n        //Instead of typing this.props everytime it can be store in a variable\r\n      this.userTyping = (type,e) =>\r\n       {\r\n           switch (type) {\r\n               case 'email':\r\n                   this.setState({email: e.target.value})\r\n                   break;\r\n                case 'password':\r\n                   this.setState({password: e.target.value})\r\n                   break;\r\n                case 'confirm_password':\r\n                   this.setState({confirm_password: e.target.value})\r\n                   break;\r\n                   \r\n                \r\n                   \r\n                   \r\n           \r\n               default:\r\n                   break;\r\n           }\r\n       }\r\n        \r\n\r\n       this.submitSignUp = e =>\r\n       {\r\n           e.preventDefault()\r\n           if(!this.formValid())\r\n           {\r\n              this.setState({signUpError: 'Password Mismatch!!'})\r\n              return\r\n           }\r\n           else\r\n           {\r\n               firebase\r\n               .auth()\r\n               .createUserWithEmailAndPassword(this.state.email,this.state.password)\r\n               .then(authRes =>{\r\n                   const userObj = {\r\n                       email: authRes.user.email,\r\n                       title:[],\r\n                       notes:[]\r\n\r\n                   }\r\n                   firebase\r\n                   .firestore()\r\n                   .collection('users')\r\n                   .doc(this.state.email)\r\n                   .set(userObj)\r\n                   .then(()=>{\r\n                       this.props.history.push('/dashboard')\r\n                   },dbError => {\r\n                       this.setState({signUpError:'Failed to add User'})\r\n                   })\r\n                },authError => {\r\n                    this.setState({signUpError:'Failed to add User'})\r\n                   })\r\n               \r\n               \r\n           }\r\n       } \r\n        return(\r\n            <div className='container'>\r\n                <div className='login'>\r\n                    <h2>Sign Up!</h2>\r\n                    <form onSubmit={(e)=> this.submitSignUp(e)} id='signUp'>\r\n                        \r\n                        <input type='email'  onChange={(e) => this.userTyping('email',e)} id='email' placeholder='Enter Your Email...' /><br /><br />\r\n                        \r\n                        <input type='password' id='password' onChange={(e) => this.userTyping('password',e)} placeholder='Enter Your Password...' /><br /><br />\r\n\r\n                        <input type='password'onChange={(e) => this.userTyping('confirm_password',e)} id='confirm_password' placeholder='Confirm Password... ' /><br /><br />\r\n                        <div id='sbtn'><Link to='/login' style={{ textDecoration: 'none', color:'#0067B8', fontSize:'15px'}}>Already have an account?</Link><button id='sign'>Sign Up</button></div>\r\n                         \r\n                    </form>\r\n                   \r\n                 {this.state.signUpError?\r\n                 <h2 id='err'>{this.state.signUpError}</h2> \r\n                 :\r\n                 null\r\n                \r\n                \r\n                }\r\n\r\n                </div> \r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SignUpComponent\r\n","import React from 'react'\r\n\r\nclass DashboardComponent extends React.Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <div>\r\n                Hello World from Dashboard\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default DashboardComponent","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  HashRouter as Router,\n  Route\n  \n} from \"react-router-dom\";\n\n\nimport LoginComponent from './login/login'\nimport SignUpComponent from './signup/signup'\nimport DashboardComponent from './dashboard/dashboard'\n\n\n\n\n//Everything within the <Router> tag is a routing page\nconst Routing = (\n  <Router>\n    <div id = 'routing-container'>\n      <Route path= '/login' component={LoginComponent}></Route>\n      <Route path= '/signup' component={SignUpComponent}></Route>\n      <Route path= '/dashboard' component={DashboardComponent}></Route>\n    </div>\n  </Router>\n)\n\n\n\n//init the firebase\nconst firebase = require('firebase')\nrequire('firebase/firestore')\n\n\n\n// Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAQOuMxht8RaP_721mPf4NyGpgKeAgTCkM\",\n  authDomain: \"notes-keeper-7a765.firebaseapp.com\",\n  databaseURL: \"https://notes-keeper-7a765.firebaseio.com\",\n  projectId: \"notes-keeper-7a765\",\n  storageBucket: \"notes-keeper-7a765.appspot.com\",\n  messagingSenderId: \"613764324701\",\n  appId: \"1:613764324701:web:949fb09c5cdd53287cdcb4\",\n  measurementId: \"G-WW4QN51M71\"\n};\n\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\n\n\n//rendering the routing pages\nReactDOM.render(\n\n  Routing,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}