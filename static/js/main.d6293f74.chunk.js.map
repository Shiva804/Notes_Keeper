{"version":3,"sources":["serviceWorker.js","auth.js","protected.route.js","login/login.js","signup/signup.js","dashboard/dashboard.js","firebase.js","index.js"],"names":["Boolean","window","location","hostname","match","this","authenticated","cb","ProtectedRoute","Component","component","rest","render","props","auth","isAuthenticated","to","pathname","state","from","firebase","require","LoginComponent","email","password","loginError","userTyping","type","e","setState","target","value","submitLogin","a","preventDefault","signInWithEmailAndPassword","then","login","history","push","err","id","onSubmit","placeholder","onChange","style","textDecoration","color","fontSize","React","SignUpComponent","confirm_password","signUpError","formValid","submitSignUp","createUserWithEmailAndPassword","authRes","userObj","user","title","notes","firestore","collection","doc","set","dbError","authError","className","DashboardComponent","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Routing","path","exact","initializeApp","analytics","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d6293f74.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","class Auth {\r\n    constructor() {\r\n      this.authenticated = false;\r\n    }\r\n  \r\n    login(cb) {\r\n      this.authenticated = true;\r\n      cb();\r\n    }\r\n  \r\n    logout(cb) {\r\n      this.authenticated = false;\r\n      cb();\r\n    }\r\n  \r\n    isAuthenticated() {\r\n      return this.authenticated;\r\n    }\r\n  }\r\n  \r\n  export default new Auth();","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport auth from \"./auth\";\r\n\r\nexport const ProtectedRoute = ({\r\n  component: Component,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        if (auth.isAuthenticated()) {\r\n          return <Component {...props} />;\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/\",\r\n                state: {\r\n                  from: props.location\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};","import React from 'react'\r\nimport './login.css'\r\nimport { Link } from 'react-router-dom'\r\nimport auth from \"../auth\";\r\n\r\nconst firebase = require('firebase')\r\n\r\nclass LoginComponent extends React.Component\r\n{\r\n    constructor()\r\n    {\r\n        super()\r\n        this.state = {\r\n            email:null,\r\n            password:null,\r\n            loginError:''\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        this.userTyping = (type,e) =>\r\n        {\r\n            switch (type) {\r\n                case 'email':\r\n                    this.setState({email: e.target.value})\r\n                    break;\r\n                 case 'password':\r\n                    this.setState({password: e.target.value})\r\n                    break;\r\n                  \r\n                 \r\n                    \r\n                    \r\n            \r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.submitLogin = async e =>\r\n        {\r\n             e.preventDefault()\r\n             firebase\r\n             .auth()\r\n             .signInWithEmailAndPassword(this.state.email,this.state.password)\r\n             .then(() => {\r\n\r\n                auth.login(() => {\r\n                    this.props.history.push(\"/dashboard\");\r\n                  \r\n                 })\r\n             }, err => {\r\n                 this.setState({loginError : 'Invalid Credentials!'})\r\n             })\r\n        }\r\n         \r\n        return(\r\n            <div id='container'>\r\n                <h1 id='nk'>Notes Keeper</h1>\r\n                <div id='login'>\r\n\r\n                    <h2>Login!</h2>\r\n                    <br />\r\n                    <br />\r\n                    <form onSubmit = {e => this.submitLogin(e)}>\r\n                        <input type='email'  id='email' placeholder='Enter your email...' onChange={e => this.userTyping('email',e)} /><br /><br/><br />\r\n                        <input type='password' id='password' placeholder='Enter your password...' onChange={e => this.userTyping('password',e)} /><br /><br />\r\n                         {this.state.loginError?\r\n                          \r\n                            <h4>{this.state.loginError}</h4>\r\n                            \r\n\r\n                         \r\n                         :\r\n                        null}\r\n                        <p>Don't have an account ?</p>\r\n                       <div id='sbn'><Link to='/signup' style={{ textDecoration: 'none', color:'#0067B8', fontSize:'19px'}}>Create account!</Link> <button type='submit' id='log'> Login </button></div>\r\n               \r\n                    \r\n\r\n\r\n                    </form>\r\n\r\n\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default LoginComponent","import React from 'react'\r\nimport './signup.css'\r\nimport { Link } from 'react-router-dom'\r\nconst firebase = require('firebase')\r\nclass SignUpComponent extends React.Component\r\n{\r\n    constructor()\r\n        {\r\n            super()\r\n            this.state = {\r\n                email:null,\r\n                password:null,\r\n                confirm_password:null,\r\n                signUpError:''\r\n            }\r\n        }\r\n    \r\n    render()\r\n    \r\n    {\r\n        this.formValid = () => this.state.password === this.state.confirm_password\r\n        \r\n\r\n\r\n        //Instead of typing this.props everytime it can be store in a variable\r\n      this.userTyping = (type,e) =>\r\n       {\r\n           switch (type) {\r\n               case 'email':\r\n                   this.setState({email: e.target.value})\r\n                   break;\r\n                case 'password':\r\n                   this.setState({password: e.target.value})\r\n                   break;\r\n                case 'confirm_password':\r\n                   this.setState({confirm_password: e.target.value})\r\n                   break;\r\n                   \r\n                \r\n                   \r\n                   \r\n           \r\n               default:\r\n                   break;\r\n           }\r\n       }\r\n        \r\n\r\n       this.submitSignUp = e =>\r\n       {\r\n           e.preventDefault()\r\n           if(!this.formValid())\r\n           {\r\n              this.setState({signUpError: 'Password Mismatch!!'})\r\n              return\r\n           }\r\n           else\r\n           {\r\n               firebase\r\n               .auth()\r\n               .createUserWithEmailAndPassword(this.state.email,this.state.password)\r\n               .then(authRes =>{\r\n                   const userObj = {\r\n                       email: authRes.user.email,\r\n                       title:[],\r\n                       notes:[]\r\n\r\n                   }\r\n                   firebase\r\n                   .firestore()\r\n                   .collection('users')\r\n                   .doc(this.state.email)\r\n                   .set(userObj)\r\n                   .then(()=>{\r\n                       this.props.history.push('/')\r\n                   },dbError => {\r\n                       this.setState({signUpError:'Failed to add User'})\r\n                   })\r\n                },authError => {\r\n                    this.setState({signUpError:'Failed to add User'})\r\n                   })\r\n               \r\n               \r\n           }\r\n       } \r\n        return(\r\n            <div className='container'>\r\n                <h1 id='nk'>Notes Keeper</h1>\r\n                <div className='login'>\r\n                    <h2>Sign Up!</h2>\r\n                    <form onSubmit={(e)=> this.submitSignUp(e)} id='signUp'>\r\n                        \r\n                        <input type='email'  onChange={(e) => this.userTyping('email',e)} id='email' placeholder='Enter Your Email...' /><br /><br />\r\n                        \r\n                        <input type='password' id='password' onChange={(e) => this.userTyping('password',e)} placeholder='Enter Your Password...' /><br /><br />\r\n\r\n                        <input type='password'onChange={(e) => this.userTyping('confirm_password',e)} id='confirm_password' placeholder='Confirm Password... ' /><br /><br />\r\n                        <div id='sbtn'><Link to='/' style={{ textDecoration: 'none', color:'#0067B8', fontSize:'15px'}}>Already have an account?</Link><button id='sign'>Sign Up</button></div>\r\n                         \r\n                    </form>\r\n                   \r\n                 {this.state.signUpError?\r\n                 <h2 id='err'>{this.state.signUpError}</h2> \r\n                 :\r\n                 null\r\n                \r\n                \r\n                }\r\n\r\n                </div> \r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SignUpComponent\r\n","import React from 'react'\r\n\r\nclass DashboardComponent extends React.Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <div id='container'>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default DashboardComponent","\r\nconst firebaseConfig = {\r\n\r\n    apiKey: 'AIzaSyAQOuMxht8RaP_721mPf4NyGpgKeAgTCkM',\r\n    authDomain: 'notes-keeper-7a765.firebaseapp.com',\r\n    databaseURL: 'https://notes-keeper-7a765.firebaseio.com',\r\n    projectId: 'notes-keeper-7a765',\r\n    storageBucket: 'notes-keeper-7a765.appspot.com',\r\n    messagingSenderId: '613764324701',\r\n    appId:'1:613764324701:web:949fb09c5cdd53287cdcb4',\r\n    measurementId:'G-WW4QN51M71'\r\n   \r\n   }\r\n   \r\nexport default firebaseConfig","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {\r\n  HashRouter as Router,\r\n  Route,\r\n  Switch\r\n  \r\n} from \"react-router-dom\";\r\nimport { ProtectedRoute } from \"./protected.route\";\r\nimport LoginComponent from './login/login'\r\nimport SignUpComponent from './signup/signup'\r\nimport DashboardComponent from './dashboard/dashboard'\r\nimport firebaseConfig from './firebase'\r\n\r\n\r\n\r\n\r\n//Everything within the <Router> tag is a routing page\r\nconst Routing = (\r\n  <Router>\r\n    <div id = 'routing-container'>\r\n      <Switch>\r\n      <Route path= '/' exact component={LoginComponent}></Route>\r\n      <Route path= '/signup' component={SignUpComponent}></Route>\r\n      <ProtectedRoute path= '/dashboard' component={DashboardComponent}></ProtectedRoute>\r\n      <Route path = '*' component = {()=>'404 NOT FOUND'}></Route>\r\n      </Switch>\r\n    </div>\r\n  </Router>\r\n)\r\n\r\n\r\n\r\n//init the firebase\r\nconst firebase = require('firebase')\r\nrequire('firebase/firestore')\r\n\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\n\r\n\r\n//rendering the routing pages\r\nReactDOM.render(\r\n\r\n  Routing,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}